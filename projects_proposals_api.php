<?php
/**
 * Project Proposal REST API
 * File: projects_proposals_api.php
 * 
 * A complete REST API for managing project proposals with CRUD operations
 * Author: Generated by Claude
 * Version: 1.0
 * 
 * Usage: Place this file in your web server and configure URL rewriting
 * Example: /var/www/html/api/project_proposals_api.php
 */

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');

// Handle preflight OPTIONS request
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

class ProjectProposalAPI {
    private $db;
    private $baseUrl;
    
    public function __construct() {
        // ========================================
        // BASE URL CONFIGURATION
        // ========================================
        // Option 1: Auto-detect base URL
        // $protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http';
        // $host = $_SERVER['HTTP_HOST'];
        // $this->baseUrl = $protocol . '://' . $host;
        
        // Option 2: Manual base URL (uncomment and modify as needed)
        $this->baseUrl = 'https://www.idigue.com';
        
        // ========================================
        // DATABASE CONFIGURATION
        // ========================================
    //     $host = 'idigue.com';
    //     $dbname = 'project_management';
    //     $username = 'your_username';
    //     $password = 'your_password';
        
    //     try {
    //         $this->db = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $username, $password);
    //         $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    //     } catch (PDOException $e) {
    //         $this->sendResponse(500, ['error' => 'Database connection failed']);
    //     }
    }
    
    public function getApiInfo() {
        $this->sendResponse(200, [
            'api_name' => 'Project Proposal REST API',
            'version' => '1.0',
            'base_url' => $this->baseUrl,
            'endpoints' => [
                'GET ' . $this->baseUrl . '/api/proposals' => 'Get all proposals',
                'GET ' . $this->baseUrl . '/api/proposals/{id}' => 'Get single proposal',
                'POST ' . $this->baseUrl . '/api/proposals' => 'Create proposal',
                'PUT ' . $this->baseUrl . '/api/proposals/{id}' => 'Update proposal',
                'DELETE ' . $this->baseUrl . '/api/proposals/{id}' => 'Delete proposal',
                'POST ' . $this->baseUrl . '/api/proposals/reset' => 'Reset all proposals'
            ]
        ]);
    }
    
    public function handleRequest() {
        $method = $_SERVER['REQUEST_METHOD'];
        $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
        $segments = explode('/', trim($path, '/'));
        var_dump($method);    
        // Extract ID if present (e.g., /api/proposals/123)
        $id = isset($segments[2]) ? (int)$segments[2] : null;
        
        // Check for reset endpoint (e.g., /api/proposals/reset)
        $action = isset($segments[2]) && !is_numeric($segments[2]) ? $segments[2] : null;
        var_dump($action);   
        switch ($method) {
            case 'GET':
                if ($action === 'info') {
                    $this->getApiInfo();
                } elseif ($id) {
                    $this->getProposal($id);
                } else {
                    $this->getAllProposals();
                }
                break;
            case 'POST':
                if ($action === 'reset') {
                    $this->resetProposals();
                } else {
                    $this->createProposal();
                }
                break;
            case 'PUT':
                if ($id) {
                    $this->updateProposal($id);
                } else {
                    $this->sendResponse(400, ['error' => 'ID required for update']);
                }
                break;
            case 'DELETE':
                if ($action === 'reset') {
                    $this->resetProposals();
                } elseif ($id) {
                    $this->deleteProposal($id);
                } else {
                    $this->sendResponse(400, ['error' => 'ID required for deletion']);
                }
                break;
            default:
                $this->sendResponse(405, ['error' => 'Method not allowed']);
        }
    }
    
    private function getAllProposals() {
        try {
            // Get query parameters for filtering and pagination
            $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
            $limit = isset($_GET['limit']) ? (int)$_GET['limit'] : 10;
            $status = isset($_GET['status']) ? $_GET['status'] : null;
            $search = isset($_GET['search']) ? $_GET['search'] : null;
            
            $offset = ($page - 1) * $limit;
            
            $sql = "SELECT * FROM project_proposals WHERE 1=1";
            $params = [];
            
            if ($status) {
                $sql .= " AND status = :status";
                $params['status'] = $status;
            }
            
            if ($search) {
                $sql .= " AND (title LIKE :search OR description LIKE :search)";
                $params['search'] = "%$search%";
            }
            
            $sql .= " ORDER BY created_at DESC LIMIT :limit OFFSET :offset";
            
            $stmt = $this->db->prepare($sql);
            foreach ($params as $key => $value) {
                $stmt->bindValue(":$key", $value);
            }
            $stmt->bindValue(':limit', $limit, PDO::PARAM_INT);
            $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
            $stmt->execute();
            
            $proposals = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            // Get total count for pagination
            $countSql = "SELECT COUNT(*) FROM project_proposals WHERE 1=1";
            if ($status) $countSql .= " AND status = :status";
            if ($search) $countSql .= " AND (title LIKE :search OR description LIKE :search)";
            
            $countStmt = $this->db->prepare($countSql);
            foreach ($params as $key => $value) {
                if ($key !== 'limit' && $key !== 'offset') {
                    $countStmt->bindValue(":$key", $value);
                }
            }
            $countStmt->execute();
            $total = $countStmt->fetchColumn();
            
            $this->sendResponse(200, [
                'data' => $proposals,
                'pagination' => [
                    'current_page' => $page,
                    'per_page' => $limit,
                    'total' => (int)$total,
                    'total_pages' => ceil($total / $limit)
                ]
            ]);
        } catch (PDOException $e) {
            $this->sendResponse(500, ['error' => 'Failed to fetch proposals']);
        }
    }
    
    private function getProposal($id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM project_proposals WHERE id = :id");
            $stmt->bindParam(':id', $id, PDO::PARAM_INT);
            $stmt->execute();
            
            $proposal = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if ($proposal) {
                $this->sendResponse(200, ['data' => $proposal]);
            } else {
                $this->sendResponse(404, ['error' => 'Proposal not found']);
            }
        } catch (PDOException $e) {
            $this->sendResponse(500, ['error' => 'Failed to fetch proposal']);
        }
    }
    
    private function createProposal() {
        try {
            $input = json_decode(file_get_contents('php://input'), true);
            
            // Validate required fields
            $required = ['title', 'description', 'client_name', 'estimated_budget', 'estimated_duration'];
            foreach ($required as $field) {
                if (!isset($input[$field]) || empty($input[$field])) {
                    $this->sendResponse(400, ['error' => "Field '$field' is required"]);
                    return;
                }
            }
            
            $sql = "INSERT INTO project_proposals (
                title, description, client_name, client_email, client_phone,
                estimated_budget, estimated_duration, status, priority,
                start_date, end_date, technologies, team_size, created_at, updated_at
            ) VALUES (
                :title, :description, :client_name, :client_email, :client_phone,
                :estimated_budget, :estimated_duration, :status, :priority,
                :start_date, :end_date, :technologies, :team_size, NOW(), NOW()
            )";
            
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':title', $input['title']);
            $stmt->bindParam(':description', $input['description']);
            $stmt->bindParam(':client_name', $input['client_name']);
            $stmt->bindParam(':client_email', $input['client_email'] ?? null);
            $stmt->bindParam(':client_phone', $input['client_phone'] ?? null);
            $stmt->bindParam(':estimated_budget', $input['estimated_budget']);
            $stmt->bindParam(':estimated_duration', $input['estimated_duration']);
            $stmt->bindParam(':status', $input['status'] ?? 'draft');
            $stmt->bindParam(':priority', $input['priority'] ?? 'medium');
            $stmt->bindParam(':start_date', $input['start_date'] ?? null);
            $stmt->bindParam(':end_date', $input['end_date'] ?? null);
            $stmt->bindParam(':technologies', $input['technologies'] ?? null);
            $stmt->bindParam(':team_size', $input['team_size'] ?? 1);
            
            $stmt->execute();
            $id = $this->db->lastInsertId();
            
            $this->sendResponse(201, [
                'message' => 'Proposal created successfully',
                'id' => (int)$id
            ]);
        } catch (PDOException $e) {
            $this->sendResponse(500, ['error' => 'Failed to create proposal']);
        }
    }
    
    private function updateProposal($id) {
        try {
            $input = json_decode(file_get_contents('php://input'), true);
            
            // Check if proposal exists
            $checkStmt = $this->db->prepare("SELECT id FROM project_proposals WHERE id = :id");
            $checkStmt->bindParam(':id', $id, PDO::PARAM_INT);
            $checkStmt->execute();
            
            if (!$checkStmt->fetch()) {
                $this->sendResponse(404, ['error' => 'Proposal not found']);
                return;
            }
            
            $fields = [];
            $params = ['id' => $id];
            
            $allowedFields = [
                'title', 'description', 'client_name', 'client_email', 'client_phone',
                'estimated_budget', 'estimated_duration', 'status', 'priority',
                'start_date', 'end_date', 'technologies', 'team_size'
            ];
            
            foreach ($allowedFields as $field) {
                if (isset($input[$field])) {
                    $fields[] = "$field = :$field";
                    $params[$field] = $input[$field];
                }
            }
            
            if (empty($fields)) {
                $this->sendResponse(400, ['error' => 'No valid fields to update']);
                return;
            }
            
            $sql = "UPDATE project_proposals SET " . implode(', ', $fields) . ", updated_at = NOW() WHERE id = :id";
            $stmt = $this->db->prepare($sql);
            
            foreach ($params as $key => $value) {
                $stmt->bindValue(":$key", $value);
            }
            
            $stmt->execute();
            
            $this->sendResponse(200, ['message' => 'Proposal updated successfully']);
        } catch (PDOException $e) {
            $this->sendResponse(500, ['error' => 'Failed to update proposal']);
        }
    }
    
    private function deleteProposal($id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM project_proposals WHERE id = :id");
            $stmt->bindParam(':id', $id, PDO::PARAM_INT);
            $stmt->execute();
            
            if ($stmt->rowCount() > 0) {
                $this->sendResponse(200, ['message' => 'Proposal deleted successfully']);
            } else {
                $this->sendResponse(404, ['error' => 'Proposal not found']);
            }
        } catch (PDOException $e) {
            $this->sendResponse(500, ['error' => 'Failed to delete proposal']);
        }
    }
    
    private function resetProposals() {
        try {
            // Optional: Check for confirmation parameter or authorization
            $input = json_decode(file_get_contents('php://input'), true);
            $confirm = isset($input['confirm']) ? $input['confirm'] : false;
            
            if (!$confirm) {
                $this->sendResponse(400, [
                    'error' => 'Reset operation requires confirmation',
                    'message' => 'Send {"confirm": true} in request body to proceed'
                ]);
                return;
            }
            
            // Begin transaction for safety
            $this->db->beginTransaction();
            
            try {
                // Get count before deletion for response
                $countStmt = $this->db->query("SELECT COUNT(*) FROM project_proposals");
                $deletedCount = $countStmt->fetchColumn();
                
                // Delete all proposals
                $this->db->exec("DELETE FROM project_proposals");
                
                // Reset auto-increment to 1
                $this->db->exec("ALTER TABLE project_proposals AUTO_INCREMENT = 1");
                
                // Commit transaction
                $this->db->commit();
                
                $this->sendResponse(200, [
                    'message' => 'All proposals have been reset successfully',
                    'deleted_count' => (int)$deletedCount,
                    'timestamp' => date('Y-m-d H:i:s')
                ]);
            } catch (Exception $e) {
                $this->db->rollback();
                throw $e;
            }
            
        } catch (PDOException $e) {
            $this->sendResponse(500, ['error' => 'Failed to reset proposals']);
        }
    }
    
    private function sendResponse($statusCode, $data) {
        http_response_code($statusCode);
        echo json_encode($data, JSON_PRETTY_PRINT);
        exit();
    }
}

// Initialize and handle the request
try {
    $api = new ProjectProposalAPI();
    $api->handleRequest();
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => 'Internal server error'], JSON_PRETTY_PRINT);
}


?>